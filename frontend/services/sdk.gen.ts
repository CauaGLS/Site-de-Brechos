// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AppApiListarExpositoresResponse, AppApiCriarExpositorData, AppApiCriarExpositorResponse, AppApiObterExpositorData, AppApiObterExpositorResponse, AppApiAtualizarExpositorData, AppApiAtualizarExpositorResponse, AppApiDeletarExpositorData, AppApiDeletarExpositorResponse, AppApiListarPecasData, AppApiListarPecasResponse, AppApiCriarPecaData, AppApiCriarPecaResponse, AppApiObterPecaData, AppApiObterPecaResponse, AppApiAtualizarPecaData, AppApiAtualizarPecaResponse, AppApiDeletarPecaData, AppApiDeletarPecaResponse, AppApiCriarIngressoData, AppApiCriarIngressoResponse, AppApiGerarQrcodeData, AppApiGerarQrcodeResponse, AppApiValidarIngressoData, AppApiValidarIngressoResponse, AppApiObterIngressoData, AppApiObterIngressoResponse } from './types.gen';

export class BrechoService {
    /**
     * Listar Expositores
     * @returns ExpositorSchema OK
     * @throws ApiError
     */
    public static appApiListarExpositores(): CancelablePromise<AppApiListarExpositoresResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/expositores'
        });
    }
    
    /**
     * Criar Expositor
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ExpositorSchema OK
     * @throws ApiError
     */
    public static appApiCriarExpositor(data: AppApiCriarExpositorData): CancelablePromise<AppApiCriarExpositorResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/expositores',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Obter Expositor
     * @param data The data for the request.
     * @param data.expositorId
     * @returns ExpositorSchema OK
     * @throws ApiError
     */
    public static appApiObterExpositor(data: AppApiObterExpositorData): CancelablePromise<AppApiObterExpositorResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/expositores/{expositor_id}',
            path: {
                expositor_id: data.expositorId
            }
        });
    }
    
    /**
     * Atualizar Expositor
     * @param data The data for the request.
     * @param data.expositorId
     * @param data.requestBody
     * @returns ExpositorSchema OK
     * @throws ApiError
     */
    public static appApiAtualizarExpositor(data: AppApiAtualizarExpositorData): CancelablePromise<AppApiAtualizarExpositorResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/expositores/{expositor_id}',
            path: {
                expositor_id: data.expositorId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Deletar Expositor
     * @param data The data for the request.
     * @param data.expositorId
     * @returns void No Content
     * @throws ApiError
     */
    public static appApiDeletarExpositor(data: AppApiDeletarExpositorData): CancelablePromise<AppApiDeletarExpositorResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/expositores/{expositor_id}',
            path: {
                expositor_id: data.expositorId
            }
        });
    }
    
    /**
     * Listar Pecas
     * @param data The data for the request.
     * @param data.expositorId
     * @returns PecaSchema OK
     * @throws ApiError
     */
    public static appApiListarPecas(data: AppApiListarPecasData = {}): CancelablePromise<AppApiListarPecasResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/pecas',
            query: {
                expositor_id: data.expositorId
            }
        });
    }
    
    /**
     * Criar Peca
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PecaSchema OK
     * @throws ApiError
     */
    public static appApiCriarPeca(data: AppApiCriarPecaData): CancelablePromise<AppApiCriarPecaResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/pecas',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Obter Peca
     * @param data The data for the request.
     * @param data.pecaId
     * @returns PecaSchema OK
     * @throws ApiError
     */
    public static appApiObterPeca(data: AppApiObterPecaData): CancelablePromise<AppApiObterPecaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/pecas/{peca_id}',
            path: {
                peca_id: data.pecaId
            }
        });
    }
    
    /**
     * Atualizar Peca
     * @param data The data for the request.
     * @param data.pecaId
     * @param data.requestBody
     * @returns PecaSchema OK
     * @throws ApiError
     */
    public static appApiAtualizarPeca(data: AppApiAtualizarPecaData): CancelablePromise<AppApiAtualizarPecaResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/pecas/{peca_id}',
            path: {
                peca_id: data.pecaId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Deletar Peca
     * @param data The data for the request.
     * @param data.pecaId
     * @returns void No Content
     * @throws ApiError
     */
    public static appApiDeletarPeca(data: AppApiDeletarPecaData): CancelablePromise<AppApiDeletarPecaResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/pecas/{peca_id}',
            path: {
                peca_id: data.pecaId
            }
        });
    }
    
    /**
     * Criar Ingresso
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IngressoSchema OK
     * @throws ApiError
     */
    public static appApiCriarIngresso(data: AppApiCriarIngressoData): CancelablePromise<AppApiCriarIngressoResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ingressos',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Gerar Qrcode
     * @param data The data for the request.
     * @param data.ingressoId
     * @returns string OK
     * @throws ApiError
     */
    public static appApiGerarQrcode(data: AppApiGerarQrcodeData): CancelablePromise<AppApiGerarQrcodeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ingressos/{ingresso_id}/qrcode',
            path: {
                ingresso_id: data.ingressoId
            },
            errors: {
                404: 'Not Found'
            }
        });
    }
    
    /**
     * Validar Ingresso
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IngressoSchema OK
     * @throws ApiError
     */
    public static appApiValidarIngresso(data: AppApiValidarIngressoData): CancelablePromise<AppApiValidarIngressoResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ingressos/validar',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * Obter Ingresso
     * @param data The data for the request.
     * @param data.ingressoId
     * @returns IngressoSchema OK
     * @throws ApiError
     */
    public static appApiObterIngresso(data: AppApiObterIngressoData): CancelablePromise<AppApiObterIngressoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ingressos/{ingresso_id}',
            path: {
                ingresso_id: data.ingressoId
            }
        });
    }
    
}